
<!--
   - This Ant project is called upon by all other Ant projects in order to get
   - standard build definitions and targets. All the targets here should be
   - 100% generic and reusable, no matter which project is being built.
  -->
<project name="build-common" default="jars" basedir=".">

	<!-- these properties must be defined by the build.xml that imports build-common.xml -->
	<fail unless="project-root" message="project-root property not set" />
	<fail unless="project-jar" message="project-jar property not set" />
	
	<!-- check that we're using the minimum Java version level -->
	<condition property="java-ok">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.5" />
			<equals arg1="${ant.java.version}" arg2="1.6" />
		</or>
	</condition>
	<fail message="A JDK of version 1.5 or greater is required" unless="java-ok" />
	
	<!-- Check the minimum version of ant -->
	<condition property="ant-ok">
		<contains string="${ant.version}" substring="version 1.8" />
	</condition>
	<fail message="Ant version 1.8 or greater is required" unless="ant-ok" />
	
	<!-- project definitions - all projects must look the same -->
	<property name="priv-dir" location="${project-root}/priv" />
	<property name="pub-dir" location="${project-root}/pub" />
	
	<property name="src-dir" location="${priv-dir}/src" />
	<property name="test-src-dir" location="${priv-dir}/test_src" />
	<property name="bin-dir" location="${priv-dir}/bin" />
	<property name="test-bin-dir" location="${priv-dir}/test_bin" />
	<property name="jar-file" location="${pub-dir}/${project-jar}" />
	
	<!--
	   - Build the output jar file for the project. 
      -->
	<target name="jars" depends="java, extra-compilation">
		<echo>Checking ${jar-file}</echo>
		<mkdir dir="${pub-dir}" />
		<jar basedir="${bin-dir}" jarfile="${jar-file}"/>
	</target>

	<!--
	   - Compile all the (non-test) java files in this project.
      -->
	<target name="java" depends="build-upstream-components">
		<echo>Checking ${ant.project.name} Java code</echo>
		<mkdir dir="${bin-dir}" />
		<depend srcdir="${src-dir}" destdir="${bin-dir}" />
		<javac srcdir="${src-dir}" destdir="${bin-dir}" debug="true" classpathref="project-classpath" includeantruntime="false"/>
	</target>
	
	<!--
	   - Package all our code (including thirdparty jars) into the packaging directory.
	   - The caller of this target must define the ${pkg-dir} property.
      -->
	<target name="package">
		<fail unless="pkg-dir" message="Property pkg-dir is not set properly" />
		<!-- TODO: finish this -->		
	</target>

	<!--
	   - Clean everything in this project.
	  -->
	<target name="clean">
		<echo>Cleaning project ${ant.project.name}</echo>
		<delete dir="${bin-dir}" />
		<delete dir="${test-bin-dir}" />
		<delete dir="${pub-dir}" />
		<antcall target="project-clean" />
	</target>
	
	<!--
	   - Default "build-upstream-components" target, in case it's not overidden.
	  -->
	<target name="build-upstream-components" />
	
	<!--
	   - Default "extra-compilation" target, in case it's not overidden.
	  -->
	<target name="extra-compilation" />

	<!--
	   - Default "project-clean" target, in case it's not overidden.
	  -->
	<target name="project-clean" />
	
	<!-- The classpath to use when unit testing -->
	<path id="test-classpath">
		<path refid="project-classpath" />
		<path location="${bin-dir}" />
		<path location="${test-bin-dir}" />
		<path refid="extra-test-classpath" />
	</path>
	
	<!-- The java.library.path to use for running unit tests -->
	<property name="java-library-path" location="${project-root}/../Utilities/pub" />

	<!--
	   - Compile all the (non-test) java files in this project.
      -->
	<target name="test-java" depends="java">
		<echo>Checking ${ant.project.name} Java test code</echo>
		<mkdir dir="${test-bin-dir}" />
		<depend srcdir="${test-src-dir}" destdir="${test-bin-dir}" />
		<javac srcdir="${test-src-dir}" destdir="${test-bin-dir}" debug="true" 
				classpathref="test-classpath" includeantruntime="true" />
	</target>
	
	<!--
	   - Execute unit tests using junit
	  -->
	<target name="test" depends="test-java">
		<junit fork="yes" printsummary="false" haltonfailure="true">
		
			<!-- ensure that the correct classpath and library path is set up -->
			<jvmarg value="-Djava.library.path=${java-library-path}" />
			<classpath refid="test-classpath" />
			
			<formatter type="brief" usefile="false" />
			
			<!--
			   - Attempt to run all classes that start with "Test", although
			   - skip any inner classes, since these aren't usually test classes.
			  -->
			<batchtest fork="yes">
				<fileset dir="${test-bin-dir}">
					<include name="**/Test*.class" />
					<exclude name="**/Test*$*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

</project>