Add a file, or set of files, to one of the BuildML build system packages.
Adding files to a package provides a convenient way to group those files,
allowing the set to be referred to by a single name.

For example, to add a number of different files to a package, use:

    bml set-file-pkg src_code *.c:*.h
    bml set-file-pkg src_code /usr/include:/usr/local/include
    bml set-file-pkg src_code /home/psmith/mysrc
    
This option adds all known files with the .c or .h suffix to the package,
then continues by adding the complete content of /usr/include,
/usr/local/include and /home/psmith/mysrc.

It is now possible to reference this complete set of files by using the
%pkg syntax. For example:

    bml show-files -f %pkg/src_code
    
will show all the files that have been added to the "src_code" package, 
whereas:

    bml show-files -f %not-pkg/src_code
    
will show all the files that are NOT inside that package.

Additionally, files can have a specific scope within a package. For
example:

   bml set-file-pkg src_code/public /usr/include
   
will indicate that the files in /usr/include have public scope within
the src_code package. Whereas:

   bml set-file-pkg src_code/private /home/psmith/mysrc
   
gives the files "private" scope. Scope names are predefined and
can not be modified by the user.

Note: an individual file will always reside in exactly one package, even if
it's the default "None" package. To remove a file from a package, use
set-file-pkg to add the file to the default "None" package, or to some
other user-defined package.

The command arguments are:

#include options/pkg-name.txt

<path-spec>:...

  A colon-separated list of paths to specify which files should be added to
  the package. This includes any of the following formats:

#include options/path-spec.txt
