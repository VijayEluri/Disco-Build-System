Show the files that are somehow derived from the specified input files.
That is, given a set of input files, display the list of all generated
files that were created by tasks that read from those input files. In
general, this means that the output files are "derived" from the input
files. 

For example, a derived file of myfile.c is myfile.o, assuming there's a
build task (C compilation) that reads myfile.c and writes myfile.o.

This command is the logical opposite of show-input-files.

The input files are specified using the same style of colon-separated list
that is used with the -f | --filter option (see below), although without
specifying the -f or --filter. For example:

    bml show-derived-files file1.c:file2.c
    
shows all files derived from file1.c and file2.c (such as file1.o and
file2.o). Whereas

    bml show-derived-files "*.o"
    
shows all the files that are derived from the complete collection of .o
files. This will typically include archive libraries (.a files) and 
executable files that link any of those .o files. Next,

    bml show-derived-files /home/psmith/mysrc/libsrc/graphics/
    
will show all the files derived from files in the graphics/ subdirectory
and it's contents. Also,

    bml show-derived-files %p/src_files
    
will show all the files derived from files in the "src_files" package.

Note that in all these cases, the derivation only goes a single step.
That is, file.o is derived from file.c. However, in some cases you might
be interested in all files that are derived from the input files, no
matter how many build tasks are used. For example:

    bml show-derived-files -a file.c
    
will show all files derived from file.c, which may include file.o, archive.a,
and executable.exe.

NOTE: the show-derived-files command takes a set of files as input, and
can also take a set of files (via -f | --filter) to filter the result set.
The two sets of files have different purposes, and should not be confused.
For example:
  
    bml show-derived-files -f "*.a" "*.o"
  
will return the list of .a files that are derived from any of the .o files
in the build tree.  

  
Command-specific options are:

-a | --all
  
  Display all files that are derived from the input files, regardless of
  how many build tasks are involved in the derivation.

#include options/file-show-pkgs.txt

#include options/show-roots.txt

#include options/file-filter.txt
