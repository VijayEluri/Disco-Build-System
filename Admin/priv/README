Maintaining BuildML
-------------------

These instructions are targeted towards people who are developing the BuildML
product, or who are trying to build for a non-supported platform. Most users
of BuildML should simply obtain the software in pre-compiled form from the
update site at http://www.buildml.com.

This documentation includes:
  * Third-party tools required to compile BuildML.
  * How to import the source code into Eclipse.
  * Instructions on compiling the code for a production release.
  * Instructions on compiling within a development environment.

Prerequisite Tools
------------------

The following third-party tools and packages are required in order to
build the BuildML software. So far, BuildML has been built on OpenSuSE (32 and
64-bit versions), and Redhat Enterprise Linux (64-bit). It's expected that 
other versions of Linux should also work correctly, although possibly with
minor tweaks to the BuildML code.

For simplicity, it's recommended that you obtain these tools via your Linux
distribution's package manager, although it's really your choice how you get
hold of them.

* scons (build tool) - Version 2.1.0 or above.
* ant (build tool) - Version 1.8 or higher.
* make (build tool) - Not used in BuildML, but useful for testing build imports.
* jdk (Java Development Kit) version 1.5 or higher. Although OpenJDK is installed
  by default on many Linux distributions, it's recommended that you use Sun/Oracle
  JDK (from java.oracle.com). Make sure that you define JAVA_HOME to reference
  this Java distribution, and also add $JAVA_HOME/bin into your path, before any
  other Java distribution.
* latex (document formatter) - You may also need to installed the related "tex"
  packages.
* git (source code management) - Although you probably have this already if you've
  already obtained the BuildML source tree.
* Eclipse (IDE) - Tested with Eclipse Indigo and Juno. At a minimum, you'll need
  the JDT (Java Development Tools), PDE (Plug-in Development Environment) and
  the Eclipse RCP Plug-in Developer Resources.
* junit - for running junit-based tests. Ensure that you have junit version 4, and
  that any junit.jar files in your Java classpath refer to version 4. For example,
  depending on your system, you may need to symlink /usr/share/ant/lib/junit.jar
  to /usr/share/java/junit4.jar.
* The ant-junit library that allows ant scripts to invoke junit tests.
* cunit - for running cunit-based tests. Make sure that the CUnit include and library
  directories are in your include/library path (such as /usr/include and /usr/lib).
  If you can't find a suitable package to install, download and compile the source
  code from http://sourceforge.net/projects/cunit/.
* The zlib compression library (headers and libraries).
* If you need to update the public web site (using ftp), also install Apache 
  commons-net and ant-commons-net. Most users won't need to do this.

As a general approach, the BuildML build tool will warn you if you don't have the
correct tools installed. However, this mechanism still needs a bit more work and
will evolve over time and new platforms are supported.


Opening the Source Code in Eclipse
----------------------------------

To check out the BuildML source code, use the following command:

   git clone https://github.com/northvankiwiguy/Disco-Build-System.git

This will pull a copy of the code repository into the "Disco-Build-System" directory
within your current working directory.

Next, start Eclipse and change your current workspace (File -> Switch Workspace) to
point to the Disco-Build-System directory. 

Although the workspace will open, you won't see any projects. To add the projects,
select "File -> Import -> General -> Existing Project into Workspace". Select your
Disco-Build-System directory as the "root", which will list all of BuildML's projects.
Select all of the projects, then select "Finish". All the projects should now appear
in the workspace.


How to Compile BuildML
----------------------

To compile the BuildML release from source code, execute the following commands
in this directory (Admin/priv).

  % ant all -Declipse-root=<path-to-eclipse-install-dir>
  
This generates a release "tar-ball", the Eclipse plug-in, and various
documentation files, placing them in the Admin/pub/ directory. The release
image is named buildml-W.X.Y.tar.gz, where W.X.Y is the version number of the
current code base.

If you don't wish to build the Eclipse plugin, you can leave off the -Declipse-root
option. This is useful for a CLI-only build.

To build with a different version number, use:

  % ant all -Dversion=W.Y.Z

To run all tests (unit tests and cli tests), execute the following:

  % ant test

These tests could easily take at least 5 minutes. The test scripts will halt
immediately upon finding a problem.

For more choices on what to build, see the help information:

  % ant help


Building BuildML in a Development Environment
--------------------------------------------

Given that the above procedure for compiling BuildML is rather time-consuming
for BuildML developers, there's a faster way to get a runnable program. This 
feature allows you to edit source code using Eclipse, then immediately run
the "bml" or "bmladmin" commands to test your changes.

To make this work, create a symlink called "bml" from your ~/bin directory to

   .../CliMain/priv/scripts/bml
   
Next, create a symlink called "bmladmin" from your ~/bin directory, also to
the exact same "bml" file as the first symlink. That is, you're creating two
symlinks that each refer to the same file.
   
You'll now be able to run the "bml" (or "bmladmin") shell script that's 
resident in the source code tree (as opposed to extracting the 
buildml-W.Y.Z.tar.gz in order to run them). When used in this mode, the 
"bml" script picks up .class files and .jar files directly from your source
tree. Note however, changes to C-language source files will require that you
compile the full release package.

To be able to run the EclipsePlugin project from within Eclipse, you must do
the following two things:

  1) In the EclipsePlugin sub-directory, create a symlink to the buildml.jar file
     in the Admin/priv/pkg/buildml-current/lib directory.
     
     $ cd EclipsePlugin
     $ ln -s ../Admin/priv/pkg/buildml-current/lib/buildml.jar .
     
  2) Once you start up the EclipsePlugin project (by selecting "Run As" ->
     "Eclipse Application"), you'll be prompted to set a preference that points
     to the bin and lib directories. To do so (within the newly-started Eclipse
     window), select Window -> Preferences -> BuildML -> Paths and browse
     to the path of your Admin/priv/pkg/buildml-current directory. This allows
     your Eclipse plug-in to access the native binaries from your development
     workspace.
     
 
 