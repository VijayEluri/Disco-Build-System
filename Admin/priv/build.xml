
<project name="Admin" default="help">

	<description>
This is the main top-level entry point for compiling the BuildML build tool. 
Use the targets in this build.xml if you want to build/test the complete
system. Otherwise use the targets in the individual project directories.
	</description>

	<!--================================================================================
	   - Imports and task definitions
	   =================================================================================-->

	<import file="shared/build/build-version.xml"/>
	
	<!-- check for that we have the correct compilers installed -->
	<import file="shared/build/build-toolcheck.xml" />

	<!-- this timestamp will be used when generating the plugin -->
	<tstamp>
		<format property="qualifier" pattern="yyyyMMddHHmm" />
	</tstamp>
		
	<!--================================================================================
	   - Path definitions
	   =================================================================================-->

	<!-- useful path definitions -->
	<property name="project-root" location=".." />
	<property name="workspace-root" location="../.." />
	<property name="priv-dir" location="${project-root}/priv" />
	<property name="pub-dir" location="${project-root}/pub" />
	
	<!-- sourcepath for generating javadoc documentation -->
	<path id="javadoc-path">
		<pathelement location="${workspace-root}/BuildScanners/priv/src" />
		<pathelement location="${workspace-root}/BuildRefactor/priv/src" />
		<pathelement location="${workspace-root}/BuildStore/priv/src" />
		<pathelement location="${workspace-root}/BuildTreeScanner/priv/src" />
		<pathelement location="${workspace-root}/Utilities/priv/src" />
        <pathelement location="${workspace-root}/ConfigurationFiles/priv/src" />
		<pathelement location="${workspace-root}/CliMain/priv/src" />
	</path>
	
	<!-- classpath for generating javadoc documentation (thirdparty libraries) -->
	<path id="javadoc-classpath">
		<pathelement location="${workspace-root}/Utilities/priv/lib/commons-cli-1.2.jar" />
		<pathelement location="${workspace-root}/Utilities/priv/lib/commons-io-2.1.jar" />
	</path>	
		
	<!--================================================================================
	   - Build Targets
	   =================================================================================-->

	<!--
	   - Provide help information. This is mostly deferred to the ant -p
	   - output.
	  -->
	<target name="help" description="Provide help on building.">
		<exec executable="ant">
			<arg value="-p" />
		</exec>
	</target>

	<!--================================================================================-->
	
	<!--
	   - Build and package everything in the BuildML software, including
	   - the command line application, the Eclipse plugin, the javadoc
	   - API, and the PDF user guide.
	   -->
	<target name="all" description="Build the complete release package."
		depends="cli, plugin, javadoc, userdoc, update-site" />
	
	<!--================================================================================-->

	<!--
	   - Build the command-line based application, which includes associated
	   - libraries, binaries and help text. This is essentially everything
	   - except for the Eclipse plugin.
	  -->
	<target name="cli" description="Build only the command-line application.">
				
		<!-- 
		   - Build everything, from the CliMain project down. This will recursively 
		   - compile other projects too.
		  -->
		<ant antfile="${workspace-root}/CliMain/priv/build.xml" target="jars" inheritall="false"/>
			
		<!-- make the packaging directory -->
		<property name="pkg-dir" location="${priv-dir}/pkg/buildml-${version}" />
		<property name="tmp-dir" location="${priv-dir}/pkg/cli-tmp" />
		<mkdir dir="${pkg-dir}/bin" />
		<mkdir dir="${pkg-dir}/lib" />
		<mkdir dir="${tmp-dir}" />
		
		<!-- for development purposes, it's helpful to have a "current" symlink to pkg-dir -->
		<symlink failonerror="true" link="${priv-dir}/pkg/buildml-current" 
					resource="${pkg-dir}" overwrite="true"/>
		
		<!-- place all the .class files into a single directory, ready to create a single jar file -->
		<unjar src="${workspace-root}/BuildStore/pub/build-store.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/BuildStore/priv/lib/sqlitejdbc-v056.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/BuildScanners/pub/build-scanners.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/BuildRefactor/pub/refactoring.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/BuildTreeScanner/pub/build-tree-scanner.jar" dest="${tmp-dir}" />
	    <unjar src="${workspace-root}/ConfigurationFiles/pub/config-files.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/CliMain/pub/cli-main.jar" dest="${tmp-dir}" />		
		<unjar src="${workspace-root}/Utilities/priv/lib/commons-cli-1.2.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/Utilities/priv/lib/commons-io-2.1.jar" dest="${tmp-dir}" />
		<unjar src="${workspace-root}/Utilities/pub/utilities.jar" dest="${tmp-dir}" />
		
		<!-- copy all of the help messages -->
		<copy todir="${tmp-dir}">
			<fileset dir="${workspace-root}/CliMain/priv">
				<include name="messages/**" />
			</fileset>
		</copy>
		
		<!-- now create a single jar file, placing it in the release package -->
		<jar basedir="${tmp-dir}" destfile="${pkg-dir}/lib/buildml.jar" />
		
		<!-- copy the "bmladmin" shell script -->
		<copy file="${workspace-root}/CliMain/priv/scripts/bml" tofile="${pkg-dir}/bin/bmladmin" />
		<chmod file="${pkg-dir}/bin/bmladmin" perm="755" />

	    <!-- copy the "bml" shell script -->
	    <copy file="${workspace-root}/CliMain/priv/scripts/bml" tofile="${pkg-dir}/bin/bml" />
	    <chmod file="${pkg-dir}/bin/bml" perm="755" />

		<!-- copy the native Utilities library -->
		<copy file="${workspace-root}/Utilities/pub/libnativeLib.so" todir="${pkg-dir}/lib" />
		
		<!-- copy the CFS binary/library -->
		<copy file="${workspace-root}/CaptureFS/pub/bin/cfs" todir="${pkg-dir}/bin" />
		<chmod file="${pkg-dir}/bin/cfs" perm="755" />
		<copy file="${workspace-root}/CaptureFS/pub/lib/libcfs.so" todir="${pkg-dir}/lib" />
		
		<!-- finally, tar up the whole release package -->
		<delete file="${pub-dir}/buildml-${version}.tar.gz" />
		<tar destfile="${pub-dir}/releases/buildml-${version}.tar.gz" compression="gzip" > 
			<tarfileset dir="${pkg-dir}/.." dirmode="755" mode="755">
				<include name="buildml-${version}/bin/**"/>
			</tarfileset>
			<tarfileset dir="${pkg-dir}/.." dirmode="755" mode="644">
				<include name="buildml-${version}/lib/**"/>
			</tarfileset>
		</tar>
			
	</target>
		
	<!--================================================================================-->

	<!--
	   - Build the Eclipse plugin - a jar file that can be dropped into an Eclipse
	   - installation, or installed via an update site
	  -->
	<target name="plugin" description="Build the Eclipse plugin." depends="cli">
		
		<property name="pkg-dir" location="${priv-dir}/pkg/buildml-${version}" />
		<property name="plugin-tmp-dir" location="${priv-dir}/pkg/plugin-tmp" />
		<property name="plugin-dir" location="${priv-dir}/pkg/plugin" />
		
		<!-- create a temporary directory where the plugin content will be gathered -->
		<mkdir dir="${plugin-dir}" />
		
		<!-- copy plugin classes -->
		<copy failonerror="true" todir="${plugin-dir}">
			<fileset dir="${workspace-root}/EclipsePlugin/bin" includes="**/*.class" />
		</copy>
		
		<!-- 
		   - copy the bin, lib directories into the /files subdirectory. This directory
		   - will be fully extracted when the plugin runs.
		  -->
		<copy failonerror="true" todir="${plugin-dir}/files">
			<fileset dir="${pkg-dir}" excludes="lib/buildml.jar" />
		</copy>
		
		<!--
		   - Now packet the buildml.jar file (containing the majority of the BuildML
		   - code, the images directories, and the plugin.xml file. 
		  -->
		<copy failonerror="true" todir="${plugin-dir}">
			<fileset file="${pkg-dir}/lib/buildml.jar" />
			<fileset dir="${workspace-root}/EclipsePlugin" includes="images/**/*,plugin.xml" />
		</copy>
		
		<!-- Copy the manifest file, being careful to insert the correct version number -->
		<copy file="${workspace-root}/EclipsePlugin/META-INF/MANIFEST.MF"
				tofile="${plugin-tmp-dir}/MANIFEST.MF" overwrite="true" />
		<replace file="${plugin-tmp-dir}/MANIFEST.MF">
			<replacefilter token="1.0.0.qualifier" value="${version}.${qualifier}" />
		</replace>
		
		<!-- jar-up the plugin, giving it a meaningful name -->
		<jar jarfile="${pub-dir}/update/plugins/com.buildml_${version}.${qualifier}.jar"
			basedir="${plugin-dir}" manifest="${plugin-tmp-dir}/MANIFEST.MF" />
				
	</target>
	
	<!--================================================================================-->

	<!--
	   - Build the Eclipse feature and update site, in preparation for posting to the
	   - public web site.
	  -->
	<target name="update-site" description="Build the Eclipse update-site">
		
		<!-- delete old content from update directory -->
		<delete dir="${pub-dir}/update" />
				
		<!-- build the Eclipse plugin, which is placed into the update/plugins directory -->
		<antcall target="plugin" />
		
		<!-- copy pure-html / image files to public directory - these are statically edited -->
		<copy todir="${pub-dir}">
			<fileset dir="web-site">
				<include name="**" />
				<exclude name="update/**" />
			</fileset>
		</copy>
		
		<!-- copy the site.xml file, taking care to update the version numbers -->
		<copy file="web-site/update/site.xml" tofile="${pub-dir}/update/site.xml" />
		<replace file="${pub-dir}/update/site.xml">
			<replacefilter token="1.0.0.qualifier" value="${version}.${qualifier}" />
		</replace>
		
		<!-- copy the feature.xml file, update the version numbers, then jar it up -->
		<copy file="web-site/update/feature.xml" 
			tofile="${pub-dir}/update/features/feature.xml" />
		<replace file="${pub-dir}/update/features/feature.xml">
			<replacefilter token="1.0.0.qualifier" value="${version}.${qualifier}" />
		</replace>
		<jar basedir="${pub-dir}/update/features/" 
		     jarfile="${pub-dir}/update/features/com.buildml_${version}.${qualifier}.jar" />
		<delete file="${pub-dir}/update/features/feature.xml" />
		
	</target>
	
	<!--================================================================================-->

	<!--
	   - Generate the javadoc API document for public/protected scope only. This is
	   - what we'd normally publish as part of a release
	   -->
	<target name="javadoc" description="Generate javadoc for public/protected scope only.">
		<javadoc destdir="${pub-dir}/javadoc" access="protected"
			packagenames="com.buildml.*"
			sourcepathref="javadoc-path"
			classpathref="javadoc-classpath" />
	</target>

	<!--
	   - Generate the javadoc API document for all scopes (private, public, etc).
	   - This is used internally by developers, to ensure their javadoc comments
	   - are sufficient.
	   -->
	<target name="javadoc-private" description="Generate javadoc for all scopes (including private).">
		<javadoc destdir="${pub-dir}/javadoc-private" access="private"
			packagenames="com.buildml.*"
			sourcepathref="javadoc-path"
			classpathref="javadoc-classpath" />
	</target>

	<!--
	   - Clean the generated javadoc files.
	  -->
	<target name="clean-javadoc" description="Clean the generated javadoc files.">
		<delete dir="${pub-dir}/javadoc" />
		<delete dir="${pub-dir}/javadoc-private" />		
	</target>
	
	<!--================================================================================-->

	<!--
	   - Generate the user document, as a PDF file.
	  -->
	<target name="userdoc" description="Generate the user documentation in PDF format.">
		<exec dir="user-docs" executable="latex" failonerror="true">
			<arg value="buildml-user-guide.tex"/>
		</exec>
		<exec dir="user-docs" executable="dvipdf" failonerror="true">
			<arg value="buildml-user-guide.dvi"/>
		</exec>
		<move file="user-docs/buildml-user-guide.pdf" todir="${pub-dir}/docs/" />	
	</target>
		
	<!--
	   - Clean all the .aux, .log and .dvi files from the user doc directory.
	  -->
	<target name="clean-userdoc" description="Clean the user documentation files.">
		<delete dir="user-docs">
			<include name="*.dvi"/>
			<include name="*.log"/>
			<include name="*.aux"/>
		</delete>
	</target>
	
	<!--================================================================================-->

	<!--
	   - Clean all projects.
	  -->
	<target name="clean" description="Clean all generated files, in all projects.">
		<ant antfile="${workspace-root}/BuildStore/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/BuildScanners/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/BuildRefactor/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/BuildTreeScanner/priv/build.xml" target="clean" inheritall="false" />
	    <ant antfile="${workspace-root}/ConfigurationFiles/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/CliMain/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/Utilities/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/CaptureFS/priv/build.xml" target="clean" inheritall="false" />
		<ant antfile="${workspace-root}/SystemTests/build.xml" target="clean" inheritall="false" />
		<antcall target="clean-javadoc" />
		<antcall target="clean-userdoc" />
		
		<!-- clean our packaging directories -->
		<delete dir="${project-root}/pub" />
		<delete dir="${project-root}/priv/bin" />
		<delete dir="${project-root}/priv/pkg" />
		
	</target>

	<!--================================================================================-->

	<!--
	   - Run unit tests for all projects (we must build the entire "cli" product first,
	   - to make sure we have all the dynamically loadable libraries).
	  -->
	<target name="unit-test" depends="cli" description="Run all unit tests.">
		<ant antfile="${workspace-root}/BuildStore/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/BuildScanners/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/BuildRefactor/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/BuildTreeScanner/priv/build.xml" target="unit-test" inheritall="false" />
	    <ant antfile="${workspace-root}/ConfigurationFiles/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/CliMain/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/Utilities/priv/build.xml" target="unit-test" inheritall="false" />
		<ant antfile="${workspace-root}/CaptureFS/priv/build.xml" target="unit-test" inheritall="false" />
	</target>

	<!--================================================================================-->

	<!--
	   - Run the CLI-based system tests. This means we invoking the "bmladmin" script, rather
	   - than invoking individual classes.
	  -->
	<target name="cli-test" depends="cli" description="Run all CLI-based tests.">
		<ant antfile="${workspace-root}/SystemTests/build.xml" target="cli-test" inheritall="false" />
	</target>
	
	<!--================================================================================-->
	
	<!--
	   - Run all tests (unit tests and CLI tests).
	  -->
	<target name="test" depends="unit-test, cli-test" 
		description="Run all regression tests (unit tests and CLI tests)." />

	<!--================================================================================-->

	<!--
	   - Obtain the FTP site's login credentials.
	  -->
	<target name="ftp-user">
		<property name="ftp.server" value="003b96b.netsolhost.com" />
		<input message="Enter FTP user name: " addproperty="ftp.userid" />
		<input message="Enter FTP password : " addproperty="ftp.password" />
	</target>

	<!--================================================================================-->

	<!--
	   - Transfer the update directory to the public web site.
	  -->
	<target name="post-update-site" depends="update-site, ftp-user" 
	    description="Post the Eclipse update site information to the public website.">
		
		<ftp action="mkdir" server="${ftp.server}" userid="${ftp.userid}"
			password="${ftp.password}" passive="yes" remotedir="/htdocs/buildml/update" />
		<ftp action="put" server="${ftp.server}" userid="${ftp.userid}" 
			password="${ftp.password}" passive="yes" verbose="yes"
			remotedir="/htdocs/buildml/update">
			<fileset dir="${pub-dir}/update" />
		</ftp>
	</target>

	<!--================================================================================-->
	
	<!--
       - Transfer the release directory to the public web site.
	  -->
	<target name="post-release" depends="cli, ftp-user"
		description="Post the release package to the public website.">
			
		<ftp action="mkdir" server="${ftp.server}" userid="${ftp.userid}"
			password="${ftp.password}" passive="yes" remotedir="/htdocs/buildml/releases" />
		<ftp action="put" server="${ftp.server}" userid="${ftp.userid}" 
			password="${ftp.password}" passive="yes" verbose="yes"
			remotedir="/htdocs/buildml/releases">
			<fileset dir="${pub-dir}/releases" />
		</ftp>
	</target>

	<!--================================================================================-->

	<!--
	   - Transfer the javadoc directory to the public web site.
	  -->
	<target name="post-javadoc" depends="javadoc, ftp-user" 
	    description="Post the javadoc pages to the public website.">
		
		<property name="javadocdir" value="/htdocs/buildml/javadoc/buildml-${version}" />
		<ftp action="mkdir" server="${ftp.server}" userid="${ftp.userid}"
			password="${ftp.password}" passive="yes" 
			remotedir="${javadocdir}" />
		<ftp action="put" server="${ftp.server}" userid="${ftp.userid}" 
			password="${ftp.password}" passive="yes" verbose="yes"
			remotedir="${javadocdir}">
			<fileset dir="${pub-dir}/javadoc" />
		</ftp>
	</target>
	
	<!--================================================================================-->

	<!--
	   - Transfer the html/image to the public web site.
	  -->
	<target name="post-static-html" depends="ftp-user, update-site" 
	    description="Post the static web pages to the public website.">
		
		<ftp action="put" server="${ftp.server}" userid="${ftp.userid}" 
			password="${ftp.password}" passive="yes" verbose="yes"
			remotedir="/htdocs/buildml">
			<fileset dir="${pub-dir}/">
				<exclude name="javadoc/**" />
				<exclude name="update/**" />
				<exclude name="releases/**" />
			</fileset>
		</ftp>
	</target>

	<!--================================================================================-->

</project>